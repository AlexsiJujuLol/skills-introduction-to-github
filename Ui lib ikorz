-- Load Fluent GUI Libraries
local Ikorz = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- Create the GUI Window
local Window = Ikorz:CreateWindow({
    Title = "Ikorz",
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Define Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
    BladeBal = Window:AddTab({ Title = "Blade Bal", Icon = "sword" }),
    Visual = Window:AddTab({ Title = "Visual", Icon = "eye" }) -- Added for visual feedback
}

-- Services and Variables
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Player = Players.LocalPlayer

local AutoParryEnabled = false
local VisualEnabled = false -- Visual toggle
local ReactionTime = 1.99
local DetectionRange = 10
local Cooldown = tick()
local Parried = false
local ParryForce = 500
local CooldownTime = 0.2

-- BladeBallRemote Reference
local BladeBallRemote = ReplicatedStorage:WaitForChild("BladeBallRemote")

-- Function to get the closest ball
local function GetClosestBall()
    local closestBall, closestDistance = nil, math.huge
    for _, Ball in ipairs(workspace.Balls:GetChildren()) do
        if Ball:GetAttribute("realBall") then
            local HRP = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
            if HRP then
                local Distance = (HRP.Position - Ball.Position).Magnitude
                if Distance < closestDistance then
                    closestDistance = Distance
                    closestBall = Ball
                end
            end
        end
    end
    return closestBall
end

-- Draw Visuals for Auto Parry
local function DrawVisual(ball)
    if not VisualEnabled then return end
    if ball and ball:IsA("BasePart") then
        local highlight = Instance.new("SelectionBox")
        highlight.Adornee = ball
        highlight.Parent = ball
        highlight.LineThickness = 0.1
        highlight.Color3 = Color3.fromRGB(255, 0, 0)
        game:GetService("Debris"):AddItem(highlight, 0.5)
    end
end

-- Auto Parry Logic
RunService.Heartbeat:Connect(function()
    if not AutoParryEnabled then return end

    local Ball = GetClosestBall()
    local HRP = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
    if not Ball or not HRP then return end

    local BallVelocity = Ball.Velocity.Magnitude
    local Distance = (HRP.Position - Ball.Position).Magnitude
    local TimeToReach = Distance / BallVelocity

    local BallDirection = (Ball.Position - HRP.Position).Unit
    local BallToPlayerDotProduct = BallDirection:Dot(HRP.CFrame.LookVector)

    if Ball:GetAttribute("target") == Player.Name and not Parried and Distance <= DetectionRange and TimeToReach <= ReactionTime and BallToPlayerDotProduct > 0 then
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)

        local Direction = (Ball.Position - HRP.Position).unit
        Ball:ApplyImpulse(Direction * ParryForce)
        Parried = true
        Cooldown = tick()
        
        -- Trigger Blade Ball Remote
        BladeBallRemote:FireServer(Ball)

        -- Draw Visual
        DrawVisual(Ball)
    end

    -- Reset Parry Cooldown
    if (tick() - Cooldown) >= CooldownTime then
        Parried = false
    end
end)

-- Add Auto Parry Toggle
local AutoParryToggle = Tabs.BladeBal:AddToggle("AutoParryToggle", { Title = "Auto Parry", Default = false })
AutoParryToggle:OnChanged(function()
    AutoParryEnabled = AutoParryToggle.Value
    print("Auto Parry: " .. (AutoParryEnabled and "Enabled" or "Disabled"))
end)

-- Add Visual Toggle in Visual Tab
local VisualToggle = Tabs.Visual:AddToggle("VisualToggle", { Title = "Enable Visuals", Default = false })
VisualToggle:OnChanged(function()
    VisualEnabled = VisualToggle.Value
    print("Visuals: " .. (VisualEnabled and "Enabled" or "Disabled"))
end)

-- Add Sliders for Settings
Tabs.Settings:AddSlider("ReactionTimeSlider", {
    Title = "Reaction Time",
    Min = 0.1,
    Max = 5,
    Default = ReactionTime,
    Callback = function(value)
        ReactionTime = value
        print("Reaction Time set to: " .. value)
    end
})

Tabs.Settings:AddSlider("DetectionRangeSlider", {
    Title = "Detection Range",
    Min = 5,
    Max = 20,
    Default = DetectionRange,
    Callback = function(value)
        DetectionRange = value
        print("Detection Range set to: " .. value)
    end
})

Tabs.Settings:AddSlider("ParryForceSlider", {
    Title = "Parry Force",
    Min = 100,
    Max = 1000,
    Default = ParryForce,
    Callback = function(value)
        ParryForce = value
        print("Parry Force set to: " .. value)
    end
})

Tabs.Settings:AddSlider("CooldownTimeSlider", {
    Title = "Cooldown Time",
    Min = 0.1,
    Max = 1,
    Default = CooldownTime,
    Callback = function(value)
        CooldownTime = value
        print("Cooldown Time set to: " .. value)
    end
})

-- Final Setup for Save/Load
SaveManager:SetLibrary(Ikorz)
InterfaceManager:SetLibrary(Ikorz)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("IkorzScriptHub")
SaveManager:SetFolder("IkorzScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

-- Default Tab Selection
Window:SelectTab(1)

-- Notify Script Loaded
Ikorz:Notify({
    Title = "Ikorz",
    Content = "Script loaded successfully.",
    Duration = 8
})

-- Load Configuration
SaveManager:LoadAutoloadConfig()
