-- Load Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Create the Window
local Window = Rayfield:CreateWindow({
   Name = "Blade Ball Auto Parry",
   Icon = 0, -- No icon
   LoadingTitle = "Blade Ball Auto Parry",
   LoadingSubtitle = "Optimized Script",
   Theme = "Default",

   ConfigurationSaving = {
      Enabled = true,
      FolderName = "BladeBallHub",
      FileName = "BladeBallConfig"
   },

   KeySystem = true,
   KeySettings = {
      Title = "Blade Ball Key System",
      Subtitle = "Access Required",
      Note = "Enter the key to unlock features",
      FileName = "BladeBallKeyFile",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"Ikorz"} -- Set your key here
   }
})

-- Blade Ball Tab
local BladeBallTab = Window:CreateTab("Blade Ball", 4483362458)

-- Auto Parry Settings
local AutoParryEnabled = true
local ReactionTime = 0.35
local DetectionRange = 50
local Parried = false
local LastParryTime = 0
local RemoteBall

-- Blade Ball Tab Section for Auto Parry
local BladeBallSection = BladeBallTab:CreateSection("Auto Parry Settings")

-- Enable Auto Parry Toggle
BladeBallTab:CreateToggle({
   Name = "Enable Auto Parry",
   Default = true,
   Callback = function(value)
      AutoParryEnabled = value
      Rayfield:Notify({
         Title = "Auto Parry Status",
         Content = value and "Auto Parry Enabled" or "Auto Parry Disabled",
         Duration = 5
      })
   end
})

-- Reaction Time Slider (Seconds)
BladeBallTab:CreateSlider({
   Name = "Reaction Time (Seconds)",
   Min = 0.1,
   Max = 1,
   Default = 0.35,
   Increment = 0.01,
   Callback = function(value)
      ReactionTime = value
      Rayfield:Notify({
         Title = "Reaction Time Updated",
         Content = "New Reaction Time: " .. value .. " seconds",
         Duration = 5
      })
   end
})

-- Detection Range Slider (Studs)
BladeBallTab:CreateSlider({
   Name = "Detection Range (Studs)",
   Min = 10,
   Max = 100,
   Default = 50,
   Increment = 1,
   Callback = function(value)
      DetectionRange = value
      Rayfield:Notify({
         Title = "Detection Range Updated",
         Content = "New Range: " .. value .. " studs",
         Duration = 5
      })
   end
})

-- Auto Parry Logic
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Player = Players.LocalPlayer

local function GetClosestBall()
    local closestBall, closestDistance = nil, math.huge
    local BallsFolder = workspace:FindFirstChild("Balls")
    if not BallsFolder then
        return nil
    end

    for _, Ball in ipairs(BallsFolder:GetChildren()) do
        if Ball:GetAttribute("realBall") then
            local HRP = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
            if HRP then
                local Distance = (HRP.Position - Ball.Position).Magnitude
                if Distance < closestDistance then
                    closestDistance = Distance
                    closestBall = Ball
                end
            end
        end
    end
    return closestBall
end

-- Loop for Parrying
RunService.RenderStepped:Connect(function()
    if not AutoParryEnabled then return end

    local Character = Player.Character
    if not Character then return end

    local HRP = Character:FindFirstChild("HumanoidRootPart")
    if not HRP then return end

    local Ball = GetClosestBall()
    if not Ball then return end

    local BallVelocity = Ball.Velocity.Magnitude
    local Distance = (HRP.Position - Ball.Position).Magnitude
    local TimeToReach = Distance / BallVelocity

    if Distance <= DetectionRange and TimeToReach <= ReactionTime and (tick() - LastParryTime) >= 0.15 then
        -- Trigger Parry
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)  -- Mouse down event
        Parried = true
        LastParryTime = tick()

        -- Update Ball color for visual feedback (green for successful parry)
        Ball.Color = Color3.fromRGB(0, 255, 0)  -- Visual feedback for parried ball

        -- Optional: Add a cooldown or reset Parried status here
    end

    -- Reset Parry status after cooldown
    if (tick() - LastParryTime) >= 0.15 then
        Parried = false
    end
end)

-- Handling Remote Ball Functionality
RunService.Heartbeat:Connect(function()
    -- You can define logic here to handle remote ball movement, effects, etc.
    local Ball = GetClosestBall()
    if Ball then
        -- Example: Ball tracking or position reset logic can go here
        -- For example, you can make the ball move towards a certain position or apply effects
    end
end)

-- Final Configuration Load
Rayfield:LoadConfiguration()
