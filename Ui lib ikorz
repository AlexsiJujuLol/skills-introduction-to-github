-- Load OrionLib
local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Orion/main/source"))()

-- Default values
local AutoParryEnabled = true
local VisualEnabled = true
local ReactionTime = 0.35
local DetectionRange = 50
local CooldownTime = 0.15
local Parried = false
local LastParryTime = 0
local ForceFieldActive = false
local ForceFieldPart

-- Drawing objects
local ParryRing = Drawing.new("Circle")
ParryRing.Visible = false
ParryRing.Color = Color3.fromRGB(255, 0, 0)
ParryRing.Transparency = 0.5
ParryRing.Thickness = 2
ParryRing.Filled = false

local BallVisual = Drawing.new("Circle")
BallVisual.Visible = false
BallVisual.Color = Color3.fromRGB(0, 0, 255)
BallVisual.Thickness = 2
BallVisual.Transparency = 0.5
BallVisual.Filled = true

local VisualRing = Drawing.new("Circle")
VisualRing.Visible = true
VisualRing.Color = Color3.fromRGB(255, 0, 0)
VisualRing.Thickness = 2
VisualRing.Transparency = 0.5
VisualRing.Filled = false
VisualRing.Radius = DetectionRange

-- Create Orion Window
local Window = OrionLib:MakeWindow({
    Name = "Orion Auto Parry Script",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "OrionParryConfig"
})

-- Main Tab with Auto Parry Toggle
local MainTab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Add Auto Parry Toggle in Main Tab
MainTab:AddToggle({
    Name = "Enable Auto Parry",
    Default = true,
    Callback = function(value)
        AutoParryEnabled = value
        OrionLib:MakeNotification({
            Name = "Auto Parry",
            Content = value and "Enabled" or "Disabled",
            Image = "rbxassetid://4483345998",
            Time = 5
        })
    end
})

-- Add Force Field Toggle
MainTab:AddToggle({
    Name = "Enable Force Field",
    Default = false,
    Callback = function(value)
        local Character = game.Players.LocalPlayer.Character
        if value then
            -- Create ForceField Part (sphere)
            if not ForceFieldPart then
                ForceFieldPart = Instance.new("Part")
                ForceFieldPart.Shape = Enum.PartType.Ball
                ForceFieldPart.Size = Vector3.new(60, 60, 60)
                ForceFieldPart.Position = Character.HumanoidRootPart.Position
                ForceFieldPart.Anchored = true
                ForceFieldPart.CanCollide = false
                ForceFieldPart.Transparency = 0.3  -- Semi-transparent effect
                ForceFieldPart.BrickColor = BrickColor.new("White")  -- White color
                ForceFieldPart.Parent = workspace
            end
            -- Update force field position
            if ForceFieldPart then
                ForceFieldPart.Position = Character.HumanoidRootPart.Position
                ForceFieldPart.Visible = true
            end
            ForceFieldActive = true
        else
            -- Destroy ForceField part when toggled off
            if ForceFieldPart then
                ForceFieldPart:Destroy()
                ForceFieldPart = nil
            end
            ForceFieldActive = false
        end
    end
})

-- Settings Tab for adjustable values
local SettingsTab = Window:MakeTab({
    Name = "Settings",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

SettingsTab:AddSlider({
    Name = "Reaction Time (Seconds)",
    Min = 0.1,
    Max = 1,
    Default = 0.35,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 0.01,
    ValueName = "s",
    Callback = function(value)
        ReactionTime = value
        OrionLib:MakeNotification({
            Name = "Reaction Time Updated",
            Content = "New value: " .. tostring(value) .. " seconds",
            Image = "rbxassetid://4483345998",
            Time = 3
        })
    end
})

SettingsTab:AddSlider({
    Name = "Detection Range (Studs)",
    Min = 10,
    Max = 100,
    Default = 50,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 1,
    ValueName = "studs",
    Callback = function(value)
        DetectionRange = value
        VisualRing.Radius = DetectionRange
        OrionLib:MakeNotification({
            Name = "Detection Range Updated",
            Content = "New value: " .. tostring(value) .. " studs",
            Image = "rbxassetid://4483345998",
            Time = 3
        })
    end
})

SettingsTab:AddSlider({
    Name = "Parry Delay (Seconds)",
    Min = 0.1,
    Max = 1,
    Default = 0.15,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 0.01,
    ValueName = "s",
    Callback = function(value)
        CooldownTime = value
        OrionLib:MakeNotification({
            Name = "Parry Delay Updated",
            Content = "New value: " .. tostring(value) .. " seconds",
            Image = "rbxassetid://4483345998",
            Time = 3
        })
    end
})

OrionLib:MakeNotification({
    Name = "Script Loaded",
    Content = "Orion Auto Parry script loaded successfully!",
    Image = "rbxassetid://4483345998",
    Time = 5
})

-- Auto Parry logic
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Player = Players.LocalPlayer

local function GetClosestBall()
    local closestBall, closestDistance = nil, math.huge
    local BallsFolder = workspace:FindFirstChild("Balls")
    if not BallsFolder then
        return nil
    end

    for _, Ball in ipairs(BallsFolder:GetChildren()) do
        if Ball:GetAttribute("realBall") then
            local HRP = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
            if HRP then
                local Distance = (HRP.Position - Ball.Position).Magnitude
                if Distance < closestDistance then
                    closestDistance = Distance
                    closestBall = Ball
                end
            end
        end
    end
    return closestBall
end

RunService.RenderStepped:Connect(function()
    local Character = Player.Character
    if Character then
        local HRP = Character:FindFirstChild("HumanoidRootPart")
        if HRP then
            local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToViewportPoint(HRP.Position)
            if OnScreen then
                VisualRing.Position = Vector2.new(ScreenPos.X, ScreenPos.Y)
                VisualRing.Visible = VisualEnabled
            else
                VisualRing.Visible = false
            end
        else
            VisualRing.Visible = false
        end
    else
        VisualRing.Visible = false
    end

    if not AutoParryEnabled and not VisualEnabled then
        ParryRing.Visible = false
        BallVisual.Visible = false
        return
    end

    local HRP = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
    if not HRP then
        ParryRing.Visible = false
        BallVisual.Visible = false
        return
    end

    local Ball = GetClosestBall()
    if not Ball then
        return
    end

    local BallVelocity = Ball.Velocity.Magnitude
    local Distance = (HRP.Position - Ball.Position).Magnitude
    local TimeToReach = Distance / BallVelocity

    local ScreenPosition, OnScreen = workspace.CurrentCamera:WorldToViewportPoint(Ball.Position)
    BallVisual.Position = Vector2.new(ScreenPosition.X, ScreenPosition.Y)
    BallVisual.Visible = OnScreen

    if Ball:GetAttribute("target") == Player.Name and not Parried and Distance <= DetectionRange and TimeToReach <= ReactionTime then
        if AutoParryEnabled and (tick() - LastParryTime) >= CooldownTime then
            VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
            Parried = true
            BallVisual.Color = Color3.fromRGB(0, 255, 0)

            LastParryTime = tick()
        end
    end

    if (tick() - LastParryTime) >= CooldownTime then
        Parried = false
    end
end)

-- Handle Force Field visualization
RunService.RenderStepped:Connect(function()
    local Character = Player.Character
    if Character then
        local HRP = Character:FindFirstChild("HumanoidRootPart")
        if HRP and ForceFieldPart then
            ForceFieldPart.Position = HRP.Position
        end
    end
end)