local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/LuauCloud/Byte/refs/heads/main/Utils/Library.lua'))()

local Library_Window = Library.Add_Window('Auto Parry Settings')

-- Tabs
local AutoParry_Tab = Library_Window.Create_Tab({
    name = 'Auto Parry',
    icon = 'rbxassetid://'
})

local Visual_Tab = Library_Window.Create_Tab({
    name = 'Visual',
    icon = 'rbxassetid://'
})

-- Sections
local AutoParry_Section = AutoParry_Tab.Create_Section()
local Visual_Section = Visual_Tab.Create_Section()

-- Global Variables
getgenv().AutoParryEnabled = false
getgenv().Mode = "Close Range"
getgenv().CloseRangeSettings = { DetectionRange = 15, ParryTiming = 0.2 }
getgenv().HighRangeSettings = { DetectionRange = 40, ParryTiming = 0.5 }
getgenv().VisualEnabled = true
getgenv().VisualColor = Color3.fromRGB(255, 0, 0)
getgenv().VisualTransparency = 0.6
local VisualIndicator -- Part for the visual range

-- Enable/Disable Auto Parry
AutoParry_Section.Create_Toggle({
    name = 'Enable Auto Parry',
    flag = 'Auto_Parry',
    callback = function(state)
        getgenv().AutoParryEnabled = state
        print("[INFO] Auto Parry is " .. (state and "Enabled" or "Disabled"))
        updateVisualIndicator(getgenv().VisualEnabled)
    end
})

-- Parry Mode Dropdown
AutoParry_Section.Create_Dropdown({
    name = 'Parry Mode',
    flag = 'Parry_Mode',
    options = { 'Close Range', 'High Range', 'Auto' },
    callback = function(mode)
        getgenv().Mode = mode
        print("[INFO] Parry Mode set to: " .. mode)
        updateVisualIndicator(getgenv().VisualEnabled)
    end
})

-- Close Range Slider
AutoParry_Section.Create_Slider({
    name = 'Close Range Detection',
    min = 10,
    max = 30,
    default = getgenv().CloseRangeSettings.DetectionRange,
    callback = function(value)
        getgenv().CloseRangeSettings.DetectionRange = value
        print("[INFO] Close Range Detection set to: " .. value)
        updateVisualIndicator(getgenv().VisualEnabled)
    end
})

-- High Range Slider
AutoParry_Section.Create_Slider({
    name = 'High Range Detection',
    min = 30,
    max = 60,
    default = getgenv().HighRangeSettings.DetectionRange,
    callback = function(value)
        getgenv().HighRangeSettings.DetectionRange = value
        print("[INFO] High Range Detection set to: " .. value)
        updateVisualIndicator(getgenv().VisualEnabled)
    end
})

-- Visual Toggle
Visual_Section.Create_Toggle({
    name = 'Enable Visuals',
    flag = 'Visual_Enabled',
    callback = function(state)
        getgenv().VisualEnabled = state
        print("[INFO] Visuals are " .. (state and "Enabled" or "Disabled"))
        updateVisualIndicator(state)
    end
})

-- Visual Color Picker
Visual_Section.Create_ColorPicker({
    name = 'Visual Color',
    default = getgenv().VisualColor,
    callback = function(color)
        getgenv().VisualColor = color
        print("[INFO] Visual Color set to:", color)
        if VisualIndicator then
            VisualIndicator.Color = color
        end
    end
})

-- Visual Transparency Slider
Visual_Section.Create_Slider({
    name = 'Visual Transparency',
    min = 0,
    max = 1,
    default = getgenv().VisualTransparency,
    callback = function(value)
        getgenv().VisualTransparency = value
        print("[INFO] Visual Transparency set to:", value)
        if VisualIndicator then
            VisualIndicator.Transparency = value
        end
    end
})

-- Visual Logic
function createVisualIndicator()
    if VisualIndicator then
        VisualIndicator:Destroy()
    end

    VisualIndicator = Instance.new("Part")
    VisualIndicator.Size = Vector3.new(1, 1, 1)
    VisualIndicator.Anchored = true
    VisualIndicator.CanCollide = false
    VisualIndicator.Transparency = getgenv().VisualTransparency
    VisualIndicator.Color = getgenv().VisualColor
    VisualIndicator.Material = Enum.Material.Neon
    VisualIndicator.Parent = workspace
end

function updateVisualIndicator(state)
    if not state then
        if VisualIndicator then
            VisualIndicator.Transparency = 1 -- Hide indicator
        end
        return
    end

    if not VisualIndicator then
        createVisualIndicator()
    end

    local HRP = detectHumanoidRootPart()
    if not HRP then return end

    local range = getgenv().CloseRangeSettings.DetectionRange
    if getgenv().Mode == "High Range" then
        range = getgenv().HighRangeSettings.DetectionRange
    elseif getgenv().Mode == "Auto" then
        local Ball = detectBall()
        if Ball then
            local distance = (HRP.Position - Ball.Position).Magnitude
            range = distance <= 20 and getgenv().CloseRangeSettings.DetectionRange or getgenv().HighRangeSettings.DetectionRange
        end
    end

    VisualIndicator.Size = Vector3.new(range * 2, 1, range * 2)
    VisualIndicator.Position = HRP.Position - Vector3.new(0, 3, 0)
    VisualIndicator.Transparency = getgenv().VisualTransparency
    VisualIndicator.Color = getgenv().VisualColor
end

-- Helper Functions
function detectBall()
    for _, ball in ipairs(workspace:GetChildren()) do
        if ball:IsA("BasePart") and ball.Name == "Ball" then
            return ball
        end
    end
end

function detectHumanoidRootPart()
    return game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
end

function triggerParry()
    print("[INFO] Parry Triggered!")
    -- Add the actual parry trigger logic here
end

-- Auto Parry Logic
game:GetService("RunService").RenderStepped:Connect(function()
    if not getgenv().AutoParryEnabled then return end

    local Ball, HRP = detectBall(), detectHumanoidRootPart()
    if not Ball or not HRP then return end

    local settings = (getgenv().Mode == "Close Range" and getgenv().CloseRangeSettings) or
                     (getgenv().Mode == "High Range" and getgenv().HighRangeSettings) or nil

    if getgenv().Mode == "Auto" then
        local distance = (HRP.Position - Ball.Position).Magnitude
        if distance <= 20 then
            settings = getgenv().CloseRangeSettings
        else
            settings = getgenv().HighRangeSettings
        end
    end

    local Speed = Ball.Velocity.Magnitude
    local Distance = (HRP.Position - Ball.Position).Magnitude
    if Distance / Speed <= settings.ParryTiming then
        triggerParry()
    end
end)

createVisualIndicator() -- Initial visual
