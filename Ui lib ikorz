-- Services
local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

local LocalPlayer = Players.LocalPlayer or Players.PlayerAdded:Wait()

-- Variables
local visualise = true
local autoParryEnabled = false
local parryCooldown = false
local cooldownTime = 0.2 -- 200 milliseconds cooldown

-- Create GUI
local ScreenGui = Instance.new("ScreenGui", game:GetService("CoreGui"))
ScreenGui.Name = "AutoParryUI"

local MainFrame = Instance.new("Frame", ScreenGui)
MainFrame.Size = UDim2.new(0, 320, 0, 230)
MainFrame.Position = UDim2.new(0.5, -160, 0.5, -115)
MainFrame.BackgroundTransparency = 0.2
MainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
MainFrame.BorderSizePixel = 0

local UICorner = Instance.new("UICorner", MainFrame)
UICorner.CornerRadius = UDim.new(0, 10)

local Title = Instance.new("TextLabel", MainFrame)
Title.Size = UDim2.new(1, 0, 0, 50)
Title.BackgroundTransparency = 1
Title.Text = "ðŸŒŸ Auto Parry"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.Font = Enum.Font.SourceSansBold
Title.TextSize = 22
Title.TextStrokeTransparency = 0.7

local ToggleButton = Instance.new("TextButton", MainFrame)
ToggleButton.Size = UDim2.new(0.8, 0, 0, 50)
ToggleButton.Position = UDim2.new(0.1, 0, 0.3, 0)
ToggleButton.Text = "Enable Auto Parry"
ToggleButton.BackgroundColor3 = Color3.fromRGB(50, 150, 50)
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.Font = Enum.Font.SourceSansBold
ToggleButton.TextSize = 18

local VisualButton = Instance.new("TextButton", MainFrame)
VisualButton.Size = UDim2.new(0.8, 0, 0, 50)
VisualButton.Position = UDim2.new(0.1, 0, 0.55, 0)
VisualButton.Text = "Toggle Visualization: ON"
VisualButton.BackgroundColor3 = Color3.fromRGB(50, 150, 50)
VisualButton.TextColor3 = Color3.fromRGB(255, 255, 255)
VisualButton.Font = Enum.Font.SourceSansBold
VisualButton.TextSize = 18

local CloseButton = Instance.new("TextButton", MainFrame)
CloseButton.Size = UDim2.new(0.2, 0, 0, 30)
CloseButton.Position = UDim2.new(0.9, -35, 0, 10)
CloseButton.Text = "X"
CloseButton.BackgroundColor3 = Color3.fromRGB(150, 50, 50)
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.Font = Enum.Font.SourceSansBold
CloseButton.TextSize = 16

local UIGradient = Instance.new("UIGradient", MainFrame)
UIGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(35, 35, 35)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(55, 55, 55))
}
UIGradient.Rotation = 45

local function applyHoverEffect(button)
    button.MouseEnter:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundTransparency = 0.1}):Play()
    end)
    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundTransparency = 0}):Play()
    end)
end

applyHoverEffect(ToggleButton)
applyHoverEffect(VisualButton)
applyHoverEffect(CloseButton)

-- Utility Functions
local function get_player()
    return Players.LocalPlayer
end

local function get_character()
    local player = get_player()
    return player and player.Character
end

local function get_humanoid_root_part()
    local char = get_character()
    return char and char:FindFirstChild("HumanoidRootPart")
end

local function get_ball()
    local ballContainer = workspace:FindFirstChild("Balls")
    if not ballContainer then return nil end

    for _, v in pairs(ballContainer:GetChildren()) do
        if not v.Anchored then
            return v
        end
    end
    return nil
end

local function calculate_parry_distance()
    local ball = get_ball()
    if ball then
        local ping = get_player():GetNetworkPing() * 20
        local baseDistance = 15
        local velocityFactor = math.clamp(ball.Velocity.Magnitude / 2.4, 5, 100)
        return math.clamp(baseDistance + velocityFactor + ping, 15, 200)
    end
    return 15
end

-- Visualizer
local sphere = Instance.new("Part")
sphere.Shape = Enum.PartType.Ball
sphere.Anchored = true
sphere.CanCollide = false
sphere.CastShadow = false
sphere.Transparency = 1 -- Start invisible
sphere.Material = Enum.Material.ForceField
sphere.Parent = workspace

local function update_visualizer()
    if not visualise or not autoParryEnabled then
        sphere.Transparency = 1
        return
    end

    local humanoidRootPart = get_humanoid_root_part()
    if not humanoidRootPart then
        sphere.Transparency = 1
        return
    end

    sphere.Transparency = 0.5
    local parryDistance = calculate_parry_distance()
    sphere.Size = Vector3.new(parryDistance * 2, parryDistance * 2, parryDistance * 2)
    sphere.Position = humanoidRootPart.Position
end

-- Parry Logic with Cooldown
local function parry_if_valid(ball)
    if ball and autoParryEnabled and not parryCooldown then
        local humanoidRootPart = get_humanoid_root_part()
        if humanoidRootPart then
            local distance = (humanoidRootPart.Position - ball.Position).Magnitude
            if distance <= sphere.Size.X / 2 then
                -- Trigger Parry
                VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
                VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 0)

                -- Activate Cooldown
                parryCooldown = true
                task.delay(cooldownTime, function()
                    parryCooldown = false
                end)
            end
        end
    end
end

RunService.RenderStepped:Connect(function()
    if autoParryEnabled then
        update_visualizer()
        parry_if_valid(get_ball())
    end
end)

-- Toggle Auto Parry
ToggleButton.MouseButton1Click:Connect(function()
    autoParryEnabled = not autoParryEnabled
    ToggleButton.Text = autoParryEnabled and "Disable Auto Parry" or "Enable Auto Parry"
    ToggleButton.BackgroundColor3 = autoParryEnabled and Color3.fromRGB(150, 50, 50) or Color3.fromRGB(50, 150, 50)
end)

-- Toggle Visualization
VisualButton.MouseButton1Click:Connect(function()
    visualise = not visualise
    VisualButton.Text = visualise and "Toggle Visualization: ON" or "Toggle Visualization: OFF"
    VisualButton.BackgroundColor3 = visualise and Color3.fromRGB(50, 150, 50) or Color3.fromRGB(150, 50, 50)
end)

-- Close UI
CloseButton.MouseButton1Click:Connect(function()
    ScreenGui:Destroy()
end)
