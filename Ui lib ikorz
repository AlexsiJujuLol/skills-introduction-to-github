-- Services
local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Debris = game:GetService("Debris")

local LocalPlayer = Players.LocalPlayer or Players.PlayerAdded:Wait()

-- Variables
local autoParryEnabled = false
local visualise = true
local effectsEnabled = true
local parryCooldown = false
local cooldownTime = 0.2 -- Cooldown to prevent double parry
local lastParriedBalls = {} -- Track parried balls

-- GUI Creation
local ScreenGui = Instance.new("ScreenGui", game:GetService("CoreGui"))
ScreenGui.Name = "AutoParryUI"

local MainFrame = Instance.new("Frame", ScreenGui)
MainFrame.Size = UDim2.new(0, 500, 0, 400) -- Larger UI
MainFrame.Position = UDim2.new(0.5, -250, 0.5, -200)
MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
MainFrame.BorderSizePixel = 0

local UICorner = Instance.new("UICorner", MainFrame)
UICorner.CornerRadius = UDim.new(0, 15)

local Title = Instance.new("TextLabel", MainFrame)
Title.Size = UDim2.new(1, 0, 0, 70)
Title.BackgroundTransparency = 1
Title.Text = "ðŸŒŸ Auto Parry System"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.Font = Enum.Font.GothamBold
Title.TextSize = 28
Title.TextStrokeTransparency = 0.7

local ToggleButton = Instance.new("TextButton", MainFrame)
ToggleButton.Size = UDim2.new(0.8, 0, 0, 60)
ToggleButton.Position = UDim2.new(0.1, 0, 0.25, 0)
ToggleButton.Text = "Enable Auto Parry"
ToggleButton.BackgroundColor3 = Color3.fromRGB(50, 150, 50)
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.Font = Enum.Font.GothamBold
ToggleButton.TextSize = 20

local VisualToggleButton = Instance.new("TextButton", MainFrame)
VisualToggleButton.Size = UDim2.new(0.8, 0, 0, 60)
VisualToggleButton.Position = UDim2.new(0.1, 0, 0.45, 0)
VisualToggleButton.Text = "Visualization: ON"
VisualToggleButton.BackgroundColor3 = Color3.fromRGB(50, 150, 50)
VisualToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
VisualToggleButton.Font = Enum.Font.GothamBold
VisualToggleButton.TextSize = 20

local EffectsToggleButton = Instance.new("TextButton", MainFrame)
EffectsToggleButton.Size = UDim2.new(0.8, 0, 0, 60)
EffectsToggleButton.Position = UDim2.new(0.1, 0, 0.65, 0)
EffectsToggleButton.Text = "Effects: ON"
EffectsToggleButton.BackgroundColor3 = Color3.fromRGB(50, 150, 50)
EffectsToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
EffectsToggleButton.Font = Enum.Font.GothamBold
EffectsToggleButton.TextSize = 20

local CloseButton = Instance.new("TextButton", MainFrame)
CloseButton.Size = UDim2.new(0.2, 0, 0, 40)
CloseButton.Position = UDim2.new(0.9, -50, 0, 15)
CloseButton.Text = "X"
CloseButton.BackgroundColor3 = Color3.fromRGB(150, 50, 50)
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.Font = Enum.Font.GothamBold
CloseButton.TextSize = 18

-- Utility Functions
local function get_character()
    return LocalPlayer.Character
end

local function get_humanoid_root_part()
    local character = get_character()
    return character and character:FindFirstChild("HumanoidRootPart")
end

local function get_ball()
    local ballContainer = workspace:FindFirstChild("Balls")
    if not ballContainer then return nil end

    for _, ball in ipairs(ballContainer:GetChildren()) do
        if not ball.Anchored and not lastParriedBalls[ball] then
            return ball
        end
    end
    return nil
end

local function calculate_parry_distance()
    local ball = get_ball()
    if ball then
        local ping = LocalPlayer:GetNetworkPing() * 20
        local baseDistance = 15
        local velocityFactor = math.clamp(ball.Velocity.Magnitude / 2.4, 5, 100)
        return math.clamp(baseDistance + velocityFactor + ping, 15, 200)
    end
    return 15
end

-- Visualizer
local sphere = Instance.new("Part")
sphere.Shape = Enum.PartType.Ball
sphere.Anchored = true
sphere.CanCollide = false
sphere.CastShadow = false
sphere.Transparency = 1
sphere.Material = Enum.Material.ForceField
sphere.Parent = workspace

local function update_visualizer()
    if not visualise or not autoParryEnabled then
        sphere.Transparency = 1
        return
    end

    local humanoidRootPart = get_humanoid_root_part()
    if humanoidRootPart then
        sphere.Transparency = 0.5
        local parryDistance = calculate_parry_distance()
        sphere.Size = Vector3.new(parryDistance * 2, parryDistance * 2, parryDistance * 2)
        sphere.Position = humanoidRootPart.Position
    else
        sphere.Transparency = 1
    end
end

-- Parry Logic
local function parry_if_valid()
    if parryCooldown or not autoParryEnabled then return end

    local ball = get_ball()
    if ball then
        local humanoidRootPart = get_humanoid_root_part()
        if humanoidRootPart then
            local distance = (humanoidRootPart.Position - ball.Position).Magnitude
            local parryDistance = calculate_parry_distance()

            if distance <= parryDistance then
                VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
                VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 0)

                -- Mark the ball as parried
                lastParriedBalls[ball] = true
                task.delay(cooldownTime, function()
                    lastParriedBalls[ball] = nil
                end)

                -- Trigger cooldown
                parryCooldown = true
                task.delay(cooldownTime, function()
                    parryCooldown = false
                end)
            end
        end
    end
end

RunService.RenderStepped:Connect(function()
    if autoParryEnabled then
        update_visualizer()
        parry_if_valid()
    end
end)

-- Button Logic
ToggleButton.MouseButton1Click:Connect(function()
    autoParryEnabled = not autoParryEnabled
    ToggleButton.Text = autoParryEnabled and "Disable Auto Parry" or "Enable Auto Parry"
    ToggleButton.BackgroundColor3 = autoParryEnabled and Color3.fromRGB(150, 50, 50) or Color3.fromRGB(50, 150, 50)
end)

VisualToggleButton.MouseButton1Click:Connect(function()
    visualise = not visualise
    VisualToggleButton.Text = visualise and "Visualization: ON" or "Visualization: OFF"
    VisualToggleButton.BackgroundColor3 = visualise and Color3.fromRGB(50, 150, 50) or Color3.fromRGB(150, 50, 50)
end)

EffectsToggleButton.MouseButton1Click:Connect(function()
    effectsEnabled = not effectsEnabled
    EffectsToggleButton.Text = effectsEnabled and "Effects: ON" or "Effects: OFF"
    EffectsToggleButton.BackgroundColor3 = effectsEnabled and Color3.fromRGB(50, 150, 50) or Color3.fromRGB(150, 50, 50)
end)

CloseButton.MouseButton1Click:Connect(function()
    ScreenGui:Destroy()
    sphere:Destroy()
end)
