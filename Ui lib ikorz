-- Load Cloud Library
local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/LuauCloud/Byte/refs/heads/main/Utils/Library.lua'))()

-- Create Window
local Library_Window = Library.Add_Window('Acceptions')

-- Create "Auto Parry" Tab
local AutoParry_Tab = Library_Window.Create_Tab({
    name = 'Auto Parry',
    icon = 'rbxassetid://' -- Add a valid icon ID if available
})

-- Create Section
local AutoParry_Section = AutoParry_Tab.Create_Section()

-- Variables
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Player = Players.LocalPlayer
local Cooldown = tick()
local Parried = false
local Connection = nil
getgenv().AutoParryEnabled = false
getgenv().AutoSpamEnabled = false
getgenv().ParryMode = "Custom"

-- Functions
local function GetBall()
    for _, Ball in ipairs(workspace.Balls:GetChildren()) do
        if Ball:GetAttribute("realBall") then
            return Ball
        end
    end
end

local function ResetConnection()
    if Connection then
        Connection:Disconnect()
        Connection = nil
    end
end

workspace.Balls.ChildAdded:Connect(function()
    local Ball = GetBall()
    if not Ball then return end
    ResetConnection()
    
    Connection = Ball:GetAttributeChangedSignal("target"):Connect(function()
        Parried = false
    end)
end)

local function detectAndTriggerParry()
    local Ball, HRP = GetBall(), Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
    if not Ball or not HRP then return end

    local Speed = Ball.zoomies.VectorVelocity.Magnitude
    local Distance = (HRP.Position - Ball.Position).Magnitude

    if Ball:GetAttribute("target") == Player.Name and not Parried and Distance / Speed <= 0.55 then
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
        Parried = true
        Cooldown = tick()
    end

    if (tick() - Cooldown) >= 1 then
        Parried = false
    end
end

local function autoSpam()
    while getgenv().AutoSpamEnabled do
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 0)
        task.wait(0.1) -- Adjust the delay for spamming speed
    end
end

-- UI: Auto Parry Toggle
AutoParry_Section.Create_Toggle({
    name = 'Enable Auto Parry',
    section = 'left',
    flag = 'Auto_Parry',

    callback = function(state)
        getgenv().AutoParryEnabled = state
        if state then
            print("[INFO] Auto Parry Enabled")
        else
            print("[INFO] Auto Parry Disabled")
        end
    end
})

-- UI: Auto Spam Toggle
AutoParry_Section.Create_Toggle({
    name = 'Enable Auto Spam',
    section = 'left',
    flag = 'Auto_Spam',

    callback = function(state)
        getgenv().AutoSpamEnabled = state
        if state then
            print("[INFO] Auto Spam Enabled")
            task.spawn(autoSpam) -- Start auto spam in a separate thread
        else
            print("[INFO] Auto Spam Disabled")
        end
    end
})

-- UI: Parry Mode Dropdown
AutoParry_Section.Create_Dropdown({
    name = 'Parry Mode',
    section = 'left',
    flag = 'Parry_Mode',
    options = {'Custom', 'Random', 'Backwards'},

    callback = function(selected)
        getgenv().ParryMode = selected
        print("[INFO] Parry Mode set to:", selected)
    end
})

-- Auto Parry Logic
RunService.RenderStepped:Connect(function()
    if getgenv().AutoParryEnabled then
        detectAndTriggerParry()
    end
end)

print("[INFO] Auto Parry Tab with Auto Spam Loaded Successfully!")
