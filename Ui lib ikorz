local Ikorz = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Ikorz:CreateWindow({
    Title = "Ikorz",
    SubTitle = "by ur dad Ikorz",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
    BladeBal = Window:AddTab({ Title = "Blade Bal", Icon = "sword" })
}

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Player = Players.LocalPlayer

local AutoParryEnabled = false
local ReactionTime = 1.99
local DetectionRange = 10
local Cooldown = tick()
local Parried = false
local ParryForce = 500
local CooldownTime = 0.2
local SpamLevel = 1
local BladeBallRemote = ReplicatedStorage:WaitForChild("BladeBallRemote")

local function GetClosestBall()
    local closestBall, closestDistance = nil, math.huge
    local HRP = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
    if HRP then
        for _, Ball in ipairs(workspace.Balls:GetChildren()) do
            if Ball:GetAttribute("realBall") then
                local Distance = (HRP.Position - Ball.Position).Magnitude
                if Distance < closestDistance then
                    closestDistance = Distance
                    closestBall = Ball
                end
            end
        end
    end
    return closestBall
end

local function CreatePredictionCircle(position)
    local ParryPredictionCircle = Instance.new("Part")
    ParryPredictionCircle.Shape = Enum.PartType.Ball
    ParryPredictionCircle.Size = Vector3.new(4, 0.1, 4)
    ParryPredictionCircle.Position = position
    ParryPredictionCircle.Anchored = true
    ParryPredictionCircle.CanCollide = false
    ParryPredictionCircle.Material = Enum.Material.Neon
    ParryPredictionCircle.Color = Color3.fromRGB(0, 255, 0)
    ParryPredictionCircle.Parent = workspace
    return ParryPredictionCircle
end

RunService.Heartbeat:Connect(function()
    if not AutoParryEnabled then return end

    local Ball = GetClosestBall()
    local HRP = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
    if not Ball or not HRP then return end

    local BallVelocity = Ball.Velocity.Magnitude
    local Distance = (HRP.Position - Ball.Position).Magnitude
    local TimeToReach = Distance / BallVelocity

    if Distance <= DetectionRange and TimeToReach <= ReactionTime then
        local BallDirection = (Ball.Position - HRP.Position).Unit
        local BallToPlayerDotProduct = BallDirection:Dot(HRP.CFrame.LookVector)

        if BallToPlayerDotProduct > 0 then
            -- Create prediction circle (for visual purposes)
            local predictionCircle = CreatePredictionCircle(Ball.Position)

            -- Execute Parry action
            if Ball:GetAttribute("target") == Player.Name and not Parried then
                for i = 1, SpamLevel do
                    VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
                    local Direction = (Ball.Position - HRP.Position).unit
                    Ball:ApplyImpulse(Direction * ParryForce)
                end
                Parried = true
                Cooldown = tick()
                BladeBallRemote:FireServer(Ball)
                predictionCircle:Destroy() -- Remove prediction circle after action
            end
        end
    end

    if (tick() - Cooldown) >= CooldownTime then
        Parried = false
    end
end)

-- Auto Parry Toggle (Moved to Main Tab)
local AutoParryToggle = Tabs.Main:AddToggle("AutoParryToggle", { Title = "Auto Parry", Default = false })

AutoParryToggle:OnChanged(function()
    AutoParryEnabled = AutoParryToggle.Value
    if AutoParryEnabled then
        print("Auto Parry Enabled!")
    else
        print("Auto Parry Disabled!")
    end
end)

-- Spam Level Dropdown
local SpamLevelToggle = Tabs.BladeBal:AddDropdown("SpamLevelToggle", {
    Title = "Spam Level",
    Default = 1,
    Values = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" },
    Callback = function(value)
        SpamLevel = tonumber(value)
        print("Spam Level set to: " .. SpamLevel)
    end
})

-- Settings Sliders
Tabs.Settings:AddSlider("ReactionTimeSlider", {
    Title = "Reaction Time",
    Min = 0.1,
    Max = 5,
    Default = ReactionTime,
    Callback = function(value)
        ReactionTime = value
        print("Reaction Time set to: " .. value .. " seconds")
    end
})

Tabs.Settings:AddSlider("DetectionRangeSlider", {
    Title = "Detection Range",
    Min = 5,
    Max = 20,
    Default = DetectionRange,
    Callback = function(value)
        DetectionRange = value
        print("Detection Range set to: " .. value .. " studs")
    end
})

Tabs.Settings:AddSlider("ParryForceSlider", {
    Title = "Parry Force",
    Min = 100,
    Max = 1000,
    Default = ParryForce,
    Callback = function(value)
        ParryForce = value
        print("Parry Force set to: " .. value)
    end
})

Tabs.Settings:AddSlider("CooldownTimeSlider", {
    Title = "Cooldown Time",
    Min = 0.1,
    Max = 1,
    Default = CooldownTime,
    Callback = function(value)
        CooldownTime = value
        print("Cooldown Time set to: " .. value .. " seconds")
    end
})

SaveManager:SetLibrary(Ikorz)
InterfaceManager:SetLibrary(Ikorz)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("IkorzScriptHub")
SaveManager:SetFolder("IkorzScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

Ikorz:Notify({
    Title = "Ikorz",
    Content = "The script has been loaded.",
    Duration = 8
})

SaveManager:LoadAutoloadConfig()
